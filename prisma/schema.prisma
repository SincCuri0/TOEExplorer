generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model User {
  id                   String         @id @default(cuid())
  name                 String?
  email                String         @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  role                 UserRole       @default(USER)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  emailNotifications   Boolean        @default(true)
  commentNotifications Boolean        @default(true)
  digestNotifications  Boolean        @default(true)
  accounts             Account[]
  events               EventRsvp[]
  comments             ForumComment[]
  posts                ForumPost[]
  sessions             Session[]
  likes                ForumLike[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ForumCategory {
  id          String      @id @default(cuid())
  name        String
  description String?
  slug        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  posts       ForumPost[]
}

model ForumPost {
  id         String         @id @default(cuid())
  title      String
  content    String
  published  Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  authorId   String
  categoryId String
  comments   ForumComment[]
  likes      ForumLike[]
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category   ForumCategory  @relation(fields: [categoryId], references: [id])

  @@index([authorId])
  @@index([categoryId])
}

model ForumComment {
  id        String          @id @default(cuid())
  content   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  postId    String
  authorId  String
  parentId  String?
  depth     Int             @default(0)
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      ForumPost       @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    ForumComment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   ForumComment[]  @relation("CommentReplies")
  likes     ForumLike[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

model ForumLike {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  userId    String
  commentId String?
  postId    String?
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   ForumComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      ForumPost?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@unique([userId, postId])
  @@index([userId])
  @@index([commentId])
  @@index([postId])
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  imageUrl    String?
  capacity    Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  rsvps       EventRsvp[]
}

model EventRsvp {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  status    String   @default("confirmed")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

model RolePermission {
  id              String    @id @default(cuid())
  role            UserRole
  canDeletePosts  Boolean   @default(false)
  canDeleteComments Boolean @default(false)
  canBanUsers     Boolean   @default(false)
  canEditPosts    Boolean   @default(false)
  canPinPosts     Boolean   @default(false)
  canManageRoles  Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([role])
}
